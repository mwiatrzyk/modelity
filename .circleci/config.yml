version: 2.1

commands:
  configure-git:
    steps:
      - run: git config --global user.name "CircleCI"
      - run: git config --global user.email "circleci@noreply.circleci.com"

  install-deps:
    parameters:
      python_version:
        type: string
    steps:
      - run: pyenv local <<parameters.python_version>>
      - restore_cache:
          name: restore dependency cache
          keys:
            - poetry-py<<parameters.python_version>>-{{ checksum "poetry.lock" }}
      - run: poetry env use <<parameters.python_version>>
      - run: poetry install -q
      - save_cache:
          name: save dependency cache
          key: poetry-py<<parameters.python_version>>-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry/

jobs:
  test:
    docker:
      - image: cimg/python:<<parameters.python_version>>
    parameters:
      python_version:
        type: string
    steps:
      - checkout
      - install-deps:
          python_version: <<parameters.python_version>>
      - run: poetry run inv check

  bump:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - configure-git
      - add_ssh_keys
      - install-deps:
          python_version: "3.12"
      - run: poetry run inv bump
      - run: git push --set-upstream origin $CIRCLE_BRANCH
      - run: git push --tags

  deploy:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - configure-git
      - install-deps:
          python_version: "3.12"
      - run: poetry build
      - run: poetry config pypi-token.pypi $PYPI_API_TOKEN
      - run: poetry publish

workflows:
  test-bump-deploy:
    jobs:
      - test:
          matrix:
            parameters:
              python_version: ["3.9", "3.10", "3.11", "3.12"]
      - bump:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
